resolver 10.96.0.10;

# upstream의 이름은 요청을 받는 서비스 이름과 동일해야 한다.
upstream user-service{
    server user-service.default.svc.cluster.local:9000;
    keepalive 32;
}

upstream notification-service{
    server notification-service.default.svc.cluster.local:9100;
    keepalive 32;
}

upstream order-service{
    server order-service.default.svc.cluster.local:9200;
    keepalive 32;
}

upstream store-service{
    server store-service.default.svc.cluster.local:9300;
    keepalive 32;
}


# server
server {
    listen 80;
    root /usr/share/nginx/html;
    index index.html;
    proxy_http_version 1.1;   # istio에서는 1.1이나 2만 사용하므로 1.1을 사용한다고 명시한다.
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Connection "";


    # 이부분은 jaeger를 사용한다면 명시하고 사용하지 않으면 굳이 명시하지 않아도 된다.
    add_header X-Request-Id $http_x_request_id;
    add_header X-B3-Traceid $http_x_b3_traceid;
    add_header X-B3-Spanid $http_x_b3_spanid;
    add_header X-B3-Parentspanid $http_x_b3_parentspanid;
    add_header X-B3-Sampled $http_x_b3_sampled;
    add_header X-B3-Flags $http_x_b3_Flags;
    add_header B3 $http_b3;
    add_header X-Ot-Span-Context $http_x_ot_span_context;

    location / {
        add_header 'Access-Control-Allow-Origin' '*';
        alias /usr/share/nginx/html/;
        try_files $uri $uri/ /index.html;
    }

    # /apis/v1/a로 시작한 요청은 api-server1으로 보낸다.
    location ~ ^/user-service(.*)$ {
        proxy_pass http://user-service;
    }


    # /apis/v1/b로 시작한 요청은 api-server2으로 보낸다.
    location ~ ^/order-service(.*)$ {
        proxy_pass http://order-service;
    }


        # /apis/v1/c로 시작한 요청은 api-server3으로 보낸다.
    location ~ ^/notification-service(.*)$ {
        proxy_pass http://notification-service;
    }

    location ~ ^/store-service(.*)$ {
        proxy_pass http://store-service;
    }

}
